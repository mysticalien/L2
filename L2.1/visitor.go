package main

import "fmt"

// Паттерн «Посетитель» позволяет добавлять новые операции к существующим классам, не изменяя их структуры.
// При этом сами классы остаются неизменными, а логика операций вынесена в отдельный класс посетителя.

// Паттерн Посетитель
//
// Применимость:
// - Этот паттерн используется, когда нужно добавить новые операции к объектам, не изменяя их классы.
// - Удобен, если часто требуется выполнять разнообразные действия с объектами из сложной иерархии классов.
//
// Плюсы:
// - Упрощает добавление новых операций, не изменяя структуру классов.
// - Позволяет переместить сложную логику из объектов в отдельный класс посетителя.
//
// Минусы:
// - Добавляет сложность при изменении иерархии объектов.
// - Плохо совместим с изменениями в структуре классов, если необходимо добавлять новые типы объектов.
//
// Реальные примеры использования:
// - Реализация различных отчетов в приложениях, где требуется последовательный обход сложной структуры данных.
// - Вычисление иерархий, например, расчет стоимости товаров в заказе с разными скидками.

// Visiting interface
type Animal interface {
	Accept(visitor Vet)
}

type Cat struct{}

func (c *Cat) Accept(visitor Vet) {
	visitor.VisitCat(c)
}

type Dog struct{}

func (d *Dog) Accept(visitor Vet) {
	visitor.VisitDog(d)
}

// Visitor interface
type Vet interface {
	VisitCat(*Cat)
	VisitDog(*Dog)
}

type AnimalVet struct{}

func (v *AnimalVet) VisitCat(c *Cat) {
	fmt.Println("A veterinarian examines a cat....")
}

func (v *AnimalVet) VisitDog(d *Dog) {
	fmt.Println("A veterinarian examines a dog....")
}

func main() {
	cat := &Cat{}
	dog := &Dog{}
	vet := &AnimalVet{}

	cat.Accept(vet)
	dog.Accept(vet)
}
