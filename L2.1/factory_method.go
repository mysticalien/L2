package main

// Фабричный метод - это шаблон проектирования, который предоставляет интерфейс для создания объектов в суперклассе,
// но позволяет подклассам изменять тип создаваемых объектов.

// Паттерн Фабричный метод
//
// Применимость:
// - Этот паттерн используется, когда подклассы должны определять тип создаваемых объектов самостоятельно.
// - Удобен, если классы не могут предсказать тип создаваемых ими объектов или если типы могут изменяться в подклассах.
//
// Плюсы:
// - Делегирует создание объектов подклассам, облегчая добавление новых типов.
// - Позволяет подклассам изменять процесс создания, сохраняя общий интерфейс.
//
// Минусы:
// - Приводит к увеличению количества классов.
// - Усложняет структуру при добавлении большого количества подклассов.
//
// Реальные примеры использования:
// - Создание различных продуктов в зависимости от условий, например, фабрики животных, создающие объекты Кот или Собака в зависимости от параметров.
// - Фабрики для создания оконных элементов в GUI-фреймворках.

import "fmt"

type Animal interface {
	Greet()
}

type Pakkun struct{}

func (p *Pakkun) Greet() {
	fmt.Println("Pakkun purrs and cuddles.")
}

type Mo struct{}

func (m *Mo) Greet() {
	fmt.Println("Moe wags her tail happily")
}

// Animal Factory
type AnimalFactory struct{}

func (f *AnimalFactory) CreateAnimal(kind string) Animal {
	if kind == "cat" {
		return &Pakkun{}
	} else if kind == "dog" {
		return &Mo{}
	}
	return nil
}

func main() {
	factory := &AnimalFactory{}

	pakkun := factory.CreateAnimal("cat")
	pakkun.Greet()

	mo := factory.CreateAnimal("dog")
	mo.Greet()
}
